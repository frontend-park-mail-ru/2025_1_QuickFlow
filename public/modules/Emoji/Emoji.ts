import emojiData from './compact.raw.json';


interface EmojiEntry {
    hexcode: string;
    label: string;
    unicode: string;
    group?: number;
    order?: number;
    tags?: string[];
    emoticon?: string | string[];
    skins?: EmojiEntry[];
};

enum GroupName {
    '–°–º–∞–π–ª—ã' = 0,
    '–õ—é–¥–∏',
    '--',
    '–ñ–∏–≤–æ—Ç–Ω—ã–µ –∏ –ø—Ä–∏—Ä–æ–¥–∞',
    '–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏',
    '–ú–µ—Å—Ç–∞ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
    '–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–ø–æ—Ä—Ç',
    '–û–¥–µ–∂–¥–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã',
    '–°–∏–º–≤–æ–ª—ã',
    '–§–ª–∞–≥–∏',
};


const HIDDEN_EMOJIS = [
    'ü´©',
    'ü™æ',
    'ü´ú',
    'ü™â',
    'ü´ü',
    'ü´Ü',
    'üá®üá∂',
    'üá¶',
    'üáß',
    'üá®',
    'üá©',
    'üá™',
    'üá´',
    'üá¨',
    'üá≠',
    'üáÆ',
    'üáØ',
    'üá∞',
    'üá±',
    'üá≤',
    'üá≥',
    'üá¥',
    'üáµ',
    'üá∂',
    'üá∑',
    'üá∏',
    'üáπ',
    'üá∫',
    'üáª',
    'üáº',
    'üáΩ',
    'üáæ',
    'üáø',
];


export default abstract class Emoji {
    private static emojiList: EmojiEntry[] = emojiData;

    private static filterAccepted(list: EmojiEntry[]): EmojiEntry[] {
        return list.filter((e) => {
            return !e.unicode.includes('\u200D') &&
                !HIDDEN_EMOJIS.includes(e.unicode) &&
                e.group !== 2;
        });
    }

    public static getEmojis(): EmojiEntry[] {
        return this.filterAccepted(this.emojiList);
    }

    // –ù–∞–π—Ç–∏ —ç–º–æ–¥–∑–∏ –ø–æ emoticon
    public static findByEmoticon(emoticon: string): EmojiEntry | undefined {
        return this.getEmojis().find((emoji) => {
            if (Array.isArray(emoji.emoticon)) {
                return emoji.emoticon.includes(emoticon);
            }
            return emoji.emoticon === emoticon;
        });
    }
    
    // –ù–∞–π—Ç–∏ —ç–º–æ–¥–∑–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é (label)
    public static findByLabel(label: string): EmojiEntry | undefined {
        return this.getEmojis().find((emoji) => emoji.label.toLowerCase() === label.toLowerCase());
    }
    
    // –ù–∞–π—Ç–∏ —ç–º–æ–¥–∑–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ —Ç–µ–≥–æ–≤ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    public static findByTag(tag: string): EmojiEntry[] {
        const lowerTag = tag.toLowerCase();
        return this.getEmojis().filter((emoji) =>
            emoji.tags.some((t) => t.toLowerCase() === lowerTag)
        );
    }
    
    // –ù–∞–π—Ç–∏ —ç–º–æ–¥–∑–∏ –ø–æ —á–∞—Å—Ç–∏ —Ç–µ–≥–∞ –∏–ª–∏ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è (–ø–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ)
    public static async search(query: string, limit: number): Promise<[number, Record<string, EmojiEntry[]>]> {
        const q = query.toLowerCase();

        const result: [number, Record<string, EmojiEntry[]>] = [
            200,
            {
                payload: Emoji.getEmojis().filter((emoji) =>
                    emoji.label.toLowerCase().includes(q) ||
                    emoji.tags.some((t) => t.toLowerCase().includes(q))
                )
            }
        ];

        return result;
    }

    public static getGroupName(id: number) {
        return GroupName[id];
    }
}
